import React, { useEffect, useState } from 'react';
import { Card, FormField, Loader } from '../components';
import { BsMoon, BsSun } from 'react-icons/bs';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return <h2 className="mt-5 font-bold text-[#FF7F50] text-xl uppercase">{title}</h2>;
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [darkMode, setDarkMode] = useState(false);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter((item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  return (
    <div className={darkMode ? 'dark' : ''}>
      <section className={`w-100 mx-auto p-8 min-h-screen transition-colors duration-500 ${darkMode ? 'bg-gradient-to-r from-gray-800 via-gray-900 to-black text-white' : 'bg-gradient-to-r from-purple-200 via-pink-200 to-red-200 text-black'}`}>
        <div className="flex justify-between items-center">
          <h1 className="font-extrabold text-4xl animate__animated animate__fadeInDown">
            The Community Showcase
          </h1>
          {/* <button
            onClick={toggleDarkMode}
            className="p-2 rounded-full bg-gray-300 dark:bg-gray-700"
          >
            {darkMode ? <BsSun className="text-yellow-500" /> : <BsMoon className="text-gray-900" />}
          </button> */}
        </div>
        <p className="mt-4 text-lg max-w-lg mx-auto animate__animated animate__fadeInUp">
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI.
        </p>

        <div className="mt-16 text-center animate__animated animate__fadeInUp">
          <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search something..."
            value={searchText}
            handleChange={handleSearchChange}
          />
        </div>

        <div className="mt-10">
          {loading ? (
            <div className="flex justify-center items-center">
              <Loader />
            </div>
          ) : (
            <>
              {searchText && (
                <h2 className="font-medium text-xl mb-3 animate__animated animate__fadeInUp">
                  Showing Results for <span className="text-yellow-300">{searchText}</span>:
                </h2>
              )}
              <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-5 animate__animated animate__fadeIn">
                {searchText ? (
                  <RenderCards
                    data={searchedResults}
                    title="No Search Results Found"
                  />
                ) : (
                  <RenderCards data={allPosts} title="No Posts Yet" />
                )}
              </div>
            </>
          )}
        </div>
      </section>
    </div>
  );
};

export default Home;
